{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/SearchCharPanel/SearchChar.js","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","load","descr","thumbnail","homepage","wiki","styleImg","className","src","alt","style","href","RandomChar","props","useState","setChar","loadChar","setLoad","useEffect","randomChar","useMarvelService","loading","error","getCharacter","clearError","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","CSSTransition","in","timeout","classNames","onClick","mjolnir","CharList","charList","setCharList","newItem","setNewItem","offset","setOffset","charEnded","setCharEnded","getAllCharactres","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","onFocusItem","current","forEach","element","classList","remove","add","focus","items","arr","map","item","i","imgStyle","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","ErrorMessage","Skeleton","comics","allComics","allUrl","push","resourceURI","url","n","lastIndexOf","substring","console","log","to","CharInfo","updateChar","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","SearchChar","getCharacterByName","result","type","initialValues","charName","validationSchema","Yup","min","required","onSubmit","htmlFor","placeholder","MainPage","selectChar","decoration","Error","img","display","width","height","objectFit","margin","setLoading","setError","request","useCallback","a","method","body","headers","fetch","response","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharacter","getAllComics","_transformComics","getComic","description","slice","urls","path","extension","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.3f5b9ddc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Error from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner'\nimport { useState,useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { CSSTransition,TransitionGroup  } from 'react-transition-group';\n\nconst  RandomChar = (props) => {\nconst [char,setChar] = useState({});\nconst [loadChar,setLoad] = useState(false)\nuseEffect(()=>{\n    randomChar()\n    // setLoad(true)\n},[]);\n\n    const {loading,error,getCharacter,clearError} =  useMarvelService()\n\n    const onCharLoaded = (char) =>{\n        setChar(char)\n        setLoad(true)\n    }\n    const randomChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n            getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const newRandomChar = () =>{\n        randomChar()\n        setLoad(false)\n    }\n        const errorMessage = error ? <Error/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char} /> : null;\n\n        return (\n            <CSSTransition  in={loadChar} timeout={300} classNames=\"my-node1\" >  \n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={newRandomChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n            </CSSTransition>\n          \n        )\n    }\n\n\nconst View = ({char,load}) => {\n    const {name,descr,thumbnail,homepage,wiki} = char\n    let styleImg = {'objectFit' : 'cover'}\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        styleImg = {'objectFit' : 'contain'}\n    }\n    return(  \n            <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={styleImg}/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n               {descr}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n   \n    )\n}\n\nexport default RandomChar;","import React,{useState,useEffect,useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\nimport { CSSTransition,TransitionGroup  } from 'react-transition-group';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList,setCharList] = useState([])\n    const [newItem,setNewItem] = useState(false)\n    const [offset,setOffset] = useState(250)\n    const [charEnded,setCharEnded] = useState(false)\n\n    const {loading,error,getAllCharactres} =  useMarvelService();\n\n    useEffect(()=>{\n        onRequest(offset, true);\n    },[]);\n\n    const onRequest = (offset,initial) =>{\n        initial ? setNewItem(false) : setNewItem(true)\n        getAllCharactres(offset)\n        .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9){\n            ended = true\n        }\n\n        setCharList(charList => [...charList,...newCharList]);\n        setNewItem(newItem => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n\n    }\n\n  const itemRefs =  useRef([]);\n\n\n\n    const onFocusItem = (id) =>{\n\n        itemRefs.current.forEach(element => {\n            element.classList.remove('char__item_selected')\n        });\n\n        itemRefs.current[id].classList.add('char__item_selected')\n        itemRefs.current[id].focus()\n    }\n//try\n    function renderItems(arr) {\n        const items =  arr.map((item,i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition  timeout={300} classNames=\"my-node\" >\n                    <li \n                        className=\"char__item\"\n                        key={item.id}\n                        ref = {el => itemRefs.current[i] = el}\n                        onClick={()=>{ \n                            props.onCharSelected(item.id)\n                            onFocusItem(i)\n                        }} \n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                onFocusItem(i);\n                            }\n                        }}>\n                        \n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n                \n            </ul>\n        )\n    }\n\n        \n        const items = renderItems(charList);\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItem ? <Spinner/> : null;\n        // const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                className=\"button button__main button__long\"\n                // disabled={newItemLoading}\n                style = {{'display' : charEnded ? 'none' : 'block'}}\n                onClick ={()=>onRequest(offset)}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n\nCharList.propTypes = {\n    onCharSelected:PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport Error from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner'\nimport React,{useState,useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton'\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom'\n\nconst  CharInfo = (props) => {\n    const [char,setChar] = useState(null);\n    const [comics,setComics] = useState(null);\n\n    const {loading,error,getCharacter,clearError} =  useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () =>{\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n        clearError()\n        getCharacter(charId)\n        .then(onCharLoaded)\n        // this.foo.bar = 0\n    }\n    // fN5mmdMf\n    const onCharLoaded = (char) =>{\n        setChar(char);\n    }\n\n\n\n        const skeleton = loading || error || char ? null : <Skeleton></Skeleton> ;\n        const errorMessage = error ? <Error/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n        return (\n            <div className=\"char__info\">\n                {errorMessage}\n                {spinner}\n                {content}\n                {skeleton}\n            </div>\n        )\n}\nconst View = ({char}) =>{\n    const {name,descr,thumbnail,homepage,wiki,comics} = char;\n    let styleImg = {'objectFit' : 'cover'}\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        styleImg = {'objectFit' : 'contain'}\n    }\n    // console.log(comics)\n    const allComics = comics.map((item,i )=>{\n        let allUrl = []\n        allUrl.push(item.resourceURI)\n       let url = allUrl.map(item => {\n            let n = item.lastIndexOf('/');\n            let result = item.substring(n + 1);\n            return +result\n    });\n    console.log(url)\n        return (\n        <li className=\"char__comics-item\" key={i}>\n            <Link to={`comics/${url}`}>\n            {item.name}\n            </Link>\n        </li>\n        )\n    })\n    return (\n        <>\n        <div className=\"char__basics\">\n                    <img src={thumbnail} alt=\"abyss\" style={styleImg}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {descr}\n                </div>\n                <div className=\"char__comics\">Comics:\n                </div>\n                <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {allComics}\n                </ul>\n        </>\n    )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { Component } from \"react\";\r\nimport Error from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error:false\r\n    }\r\n    componentDidCatch(error,errorInfo){\r\n        console.log(error,errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return <Error></Error>\r\n        }\r\n        return  this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport '../SearchCharPanel/SearchChar.scss';\r\nimport {Link} from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Error from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner'\r\n\r\nconst SearchChar =  () =>{\r\n    const [char,setChar] = useState(null)\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const updateChar = (name) =>{\r\n        getCharacterByName(name).then(onCharLoaded)\r\n    }\r\n    const onCharLoaded = (char) =>{\r\n        setChar(char)\r\n        console.log(char)\r\n    }\r\n    const result =  !char ? null : char.length > 0 ? \r\n    <div className='search__char-wrapper'>\r\n        <div className=\"search__char-success-text\">\r\n        There is! Visit {char[0].name} page?\r\n        </div>\r\n        <Link to={`/Marvelapi/characters/${char[0].id}`}>\r\n        <button  type='submit' className=\"button button__main button__secondary\">\r\n                    <div className=\"inner\">Go to page</div>\r\n        </button>\r\n        </Link>\r\n    </div> : <div className='search__char-wrapper'>\r\n        <div className=\"search__char-error-text\">\r\n        The character was not found.  Check the name and try again\r\n        </div>\r\n    </div>\r\nreturn(\r\n    <div className=\"search__char-form\">\r\n        <Formik\r\n        initialValues={{\r\n            charName: ''\r\n        }}\r\n        validationSchema={Yup.object({\r\n            charName: Yup.string('charName').min(2,'Минимум 2 символа!').required('Обезательное поле!')\r\n        })}\r\n        onSubmit = {({charName})=>{\r\n            updateChar(charName)\r\n        }}\r\n        >\r\n        <Form>\r\n            <label  htmlFor=\"charName\" className=\"search__char-label\">Or find a character by name:</label>\r\n            <div className='search__char-wrapper'>\r\n                <Field\r\n                        id=\"charName\" \r\n                        name='charName' \r\n                        type='text' \r\n                        placeholder=\"Enter name\"\r\n                ></Field>\r\n                <button  type='submit' className=\"button button__main\">\r\n                    <div className=\"inner\">find</div>\r\n                </button>\r\n            </div>\r\n            <ErrorMessage component='div' className=\"char__search-error\" name='charName'></ErrorMessage>\r\n        </Form>\r\n        </Formik>\r\n        {result}\r\n    </div>\r\n)\r\n}\r\nexport default SearchChar ","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport SearchChar from \"../SearchCharPanel/SearchChar\";\r\nimport {useState} from 'react';\r\n\r\nconst MainPage = () =>{\r\n    const [selectChar,setChar] = useState(null)\r\n\r\n    const onCharCelected = (id) =>{\r\n        setChar(id);\r\n    };\r\n    return (\r\n        <>\r\n        <ErrorBoundary>\r\n            <RandomChar/>\r\n        </ErrorBoundary>\r\n\r\n        <div className=\"char__content\">\r\n\r\n        <ErrorBoundary>\r\n            <CharList onCharSelected={onCharCelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n            <ErrorBoundary>\r\n                    <CharInfo charId = {selectChar} />\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                    <SearchChar />\r\n            </ErrorBoundary>\r\n        </div>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n};\r\nexport default MainPage","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\nconst Error =  () =>{\r\n    return(\r\n        <img src={img}  style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}></img>\r\n    )\r\n}\r\nexport default Error;","import {useHttp} from '../hooks/http.hook'\r\n\r\nconst  useMarvelService = () => {\r\n\r\n   const {loading,error,clearError,request} = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=0803ac54e9aa8cbbe036f1c7b3b3d1c0'\r\n    const _baseOffset = 210;\r\n\r\n\r\n     const getAllCharactres = async (offset = _baseOffset) =>{\r\n      const res =  await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter)\r\n     }\r\n\r\n     const getCharacter = async (id) =>{\r\n       const res =  await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n       return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = _baseOffset) =>{\r\n      const res  = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics)\r\n    };\r\n    const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n  }\r\nconst getCharacterByName = async (name) => {\r\n   const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n   return res.data.results.map(_transformCharacter);\r\n}\r\n    const _transformCharacter = (char) =>{\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         descr: char.description ? char.description.slice(0,220) + '...': 'description not found',\r\n         homepage: char.urls[0].url,\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         wiki: char.urls[1].url,\r\n         comics:  char.comics.items ? char.comics.items.slice(0,9) : 'comics not found'\r\n      }\r\n    }\r\n    const _transformComics = (comics) =>{\r\n         return {\r\n            id: comics.id,\r\n            title:comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ?  comics.prices[0].price : 'not pricing',\r\n            url:comics.urls[0].url\r\n         }\r\n   };\r\n    return {\r\n       loading,error,getAllCharactres,getCharacter,clearError,getAllComics,getComic,getCharacterByName\r\n    }\r\n }\r\n\r\n export default useMarvelService;","import {useState,useCallback} from 'react'\r\n\r\nexport const useHttp = () =>{\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n   \r\n    const request = useCallback(async (url,method = 'GET',body = null,headers = {'Content-Type': 'application/json'}) =>{\r\n\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url,{method,body,headers});\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return(data);\r\n        }\r\n        catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n             \r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=>{\r\n        setError(null)\r\n    },[])\r\n    return {loading,error,clearError,request}\r\n};"],"sourceRoot":""}