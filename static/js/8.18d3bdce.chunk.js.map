{"version":3,"sources":["components/pages/CharPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","сharLoad","name","thumbnail","descr","in","timeout","classNames","className","src","to","CharPage","charID","useParams","useState","setChar","setLoad","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","then","onCharLoaded","errorMessage","spinner","content","Error","img","style","display","width","height","objectFit","margin","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharactres","offset","res","results","map","_transformCharacter","id","getAllComics","_transformComics","getComic","getCharacterByName","description","slice","homepage","urls","path","extension","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/8.18d3bdce.chunk.js","sourcesContent":["import {useParams,Link} from 'react-router-dom'\r\nimport Error from '../errorMessage/ErrorMessage';\r\nimport '../pages/charPage.scss';\r\nimport Spinner from '../spinner/Spinner'\r\nimport React,{useState,useEffect} from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { CSSTransition  } from 'react-transition-group';\r\nconst CharPage = () =>{\r\n    const {charID} = useParams();\r\n    const [char,setChar] = useState(null);\r\n    const [сharLoad,setLoad] = useState(false);\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [charID])\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        getCharacter(charID)\r\n            .then(onCharLoaded)\r\n    }\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n        setLoad(true)\r\n    }\r\n    const errorMessage = error ? <Error/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} сharLoad={сharLoad} /> : null;\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\nconst View = ({char,сharLoad}) =>{\r\n    const {name,thumbnail,descr} = char;\r\n    return (\r\n        <CSSTransition in={сharLoad} timeout={300} classNames=\"my-char\">\r\n        <div className=\"single-char\">\r\n        <img  className=\"single-char__char-img\" src={thumbnail}/>\r\n        <div className=\"single-char__info\">\r\n            <h2 className=\"single-char__name\">{name}</h2>\r\n            <p className=\"single-char__descr\">{descr}</p>\r\n        </div>\r\n    <Link to='/Marvelapi' className=\"link-back\">\r\n        Go back!!!!\r\n    </Link>\r\n    </div>\r\n    </CSSTransition>\r\n    )\r\n}\r\nexport default CharPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\nconst Error =  () =>{\r\n    return(\r\n        <img src={img}  style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}></img>\r\n    )\r\n}\r\nexport default Error;","import {useHttp} from '../hooks/http.hook'\r\n\r\nconst  useMarvelService = () => {\r\n\r\n   const {loading,error,clearError,request} = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=0803ac54e9aa8cbbe036f1c7b3b3d1c0'\r\n    const _baseOffset = 210;\r\n\r\n\r\n     const getAllCharactres = async (offset = _baseOffset) =>{\r\n      const res =  await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter)\r\n     }\r\n\r\n     const getCharacter = async (id) =>{\r\n       const res =  await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n       return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = _baseOffset) =>{\r\n      const res  = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics)\r\n    };\r\n    const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n  }\r\nconst getCharacterByName = async (name) => {\r\n   const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n   return res.data.results.map(_transformCharacter);\r\n}\r\n    const _transformCharacter = (char) =>{\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         descr: char.description ? char.description.slice(0,220) + '...': 'description not found',\r\n         homepage: char.urls[0].url,\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         wiki: char.urls[1].url,\r\n         comics:  char.comics.items ? char.comics.items.slice(0,9) : 'comics not found'\r\n      }\r\n    }\r\n    const _transformComics = (comics) =>{\r\n         return {\r\n            id: comics.id,\r\n            title:comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ?  comics.prices[0].price : 'not pricing',\r\n            url:comics.urls[0].url\r\n         }\r\n   };\r\n    return {\r\n       loading,error,getAllCharactres,getCharacter,clearError,getAllComics,getComic,getCharacterByName\r\n    }\r\n }\r\n\r\n export default useMarvelService;","import {useState,useCallback} from 'react'\r\n\r\nexport const useHttp = () =>{\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n   \r\n    const request = useCallback(async (url,method = 'GET',body = null,headers = {'Content-Type': 'application/json'}) =>{\r\n\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url,{method,body,headers});\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return(data);\r\n        }\r\n        catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n             \r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=>{\r\n        setError(null)\r\n    },[])\r\n    return {loading,error,clearError,request}\r\n};"],"sourceRoot":""}